docker-compose \
 -f docker-compose-test-local.yml \
 run --rm unit


 ls -l *go-demo*

 NOT WORK docker build -t go-demo


docker-compose \
 -f docker-compose-test-local.yml \
 build app

docker-compose \
 -f docker-compose-test-local.yml \
 up -d staging-dep

 docker-compose \
 -f docker-compose-test-local.yml \
 ps

 docker-compose \
 -f docker-compose-test-local.yml \
 run --rm staging

docker-compose \
 -f docker-compose-test-local.yml \
 down

 docker-compose \
 -f docker-compose-test-local.yml \
 ps


docker pull alpine
docker tag alpine localhost:5000/alpine
docker push localhost:5000/alpine

ls -1 docker/registry/v2/repositories/alpine/

docker tag go-demo localhost:5000/go-demo:1.0
docker push localhost:5000/go-demo:1.0

docker-machine rm -f go-demo


Chapter 2




for i in 1 2 3; do
 docker-machine create -d virtualbox node-$i
 done

docker-machine ls

eval $(docker-machine env node-1)

docker swarm init \
 --advertise-addr $(docker-machine ip node-1)

docker swarm join-token -q manager

TOKEN=$(docker swarm join-token -q worker)


for i in 2 3; do
 eval $(docker-machine env node-$i)

 docker swarm join \
 --token $TOKEN \
 --advertise-addr $(docker-machine ip node-$i) \
 $(docker-machine ip node-1):2377
 done

eval $(docker-machine env node-1)
 docker node ls


docker network create --driver overlay go-demo


docker network ls


docker service create --name go-demo-db \
 --network go-demo \
 mongo:3.2.10

docker service ls

docker service inspect go-demo-db

docker service create --name go-demo \
 -e DB=go-demo-db \
 --network go-demo \
 vfarcic/go-demo:1.0

docker service scale go-demo=5

docker service ls

docker service ps go-demo

docker-machine rm -f node-3

docker-machine rm -f node-1 node-2

Chapter 3



for i in 1 2 3; do
 docker-machine create -d virtualbox node-$i
 done

 eval $(docker-machine env node-1)

 docker swarm init \
 --advertise-addr $(docker-machine ip node-1)

TOKEN=$(docker swarm join-token -q worker)

 for i in 2 3; do
 eval $(docker-machine env node-$i)

 docker swarm join \
 --token $TOKEN \
 --advertise-addr $(docker-machine ip node-$i) \
 $(docker-machine ip node-1):2377
 done

 eval $(docker-machine env node-1)

 docker node ls

docker service create --name go-demo-db \
 mongo:3.2.10

docker service inspect --pretty go-demo-db

docker service rm go-demo-db

docker network create --driver overlay go-demo

 docker service create --name go-demo-db \
 --network go-demo \
 mongo:3.2.10

docker service inspect --pretty go-demo-db


docker service create --name util \
 --network go-demo --mode global \
 alpine sleep 1000000000


docker service ps util

ID=$(docker ps -q --filter label=com.docker.swarm.service.name=util)

docker exec -it $ID drill go-demo-db

docker network create --driver overlay proxy


docker network ls -f "driver=overlay"

docker service create --name go-demo \
 -e DB=go-demo-db \
 --network go-demo \
 --network proxy \
 vfarcic/go-demo:1.0

docker service create --name proxy \
 -p 80:80 \
 -p 443:443 \
 -p 8080:8080 \
 --network proxy \
 -e MODE=swarm \
 vfarcic/docker-flow-proxy

docker service ps proxy

curl "$(docker-machine ip node-1):8080/v1/docker-flow-proxy/reconfigure?serviceN\
ame=go-demo&servicePath=/demo&port=8080"

curl -i $(docker-machine ip node-1)/demo/hello

NODE=$(docker service ps proxy | tail -n +2 | awk '{print $4}')

eval $(docker-machine env $NODE)

ID=$(docker ps -q --filter "ancestor=vfarcic/docker-flow-proxy")



ID=$(docker ps -q -f "name=proxy")

docker exec -it \
$ID cat /cfg/haproxy.cfg


eval $(docker-machine env node-1)
docker service scale go-demo=5


ID=$(docker ps -q --filter label=com.docker.swarm.service.name=util)

 docker exec -it $ID apk add --update drill

 docker exec -it $ID drill go-demo
